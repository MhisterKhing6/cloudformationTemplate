AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to create IAM users, groups, and EventBridge/Lambda integration."

Parameters:
  S3UserEmail:
    Type: String
    Description: Email address for the S3 user.
  EC2UserEmail:
    Type: String
    Description: Email address for the EC2 user.

Resources:
  # Secret Manager for One-Time Password
  OTPSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "One-Time Password for all users."
      GenerateSecretString:
        SecretStringTemplate: '{"password": ""}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # S3 Group with Read Access
  S3Group:
    Type: "AWS::IAM::Group"

  S3Policy:
    Type: "AWS::IAM::Policy"
    Properties:
      Groups:
        - !Ref S3Group
      PolicyName: "S3ReadAccess"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:ListBucket"
              - "s3:GetObject"
            Resource:
              - "*"

  # EC2 Group with Read Access
  EC2Group:
    Type: "AWS::IAM::Group"

  EC2Policy:
    Type: "AWS::IAM::Policy"
    Properties:
      Groups:
        - !Ref EC2Group
      PolicyName: "EC2ReadAccess"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ec2:DescribeInstances"
              - "ec2:DescribeTags"
            Resource:
              - "*"

  # IAM Users
  S3User:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - !Ref S3Group
      LoginProfile:
        Password: !Join ["", [!Sub "{{resolve:secretsmanager:${OTPSecret}:SecretString:password}}"]]
        PasswordResetRequired: true

  EC2User:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - !Ref EC2Group
      LoginProfile:
        Password: !Join ["", [!Sub "{{resolve:secretsmanager:${OTPSecret}:SecretString:password}}"]]
        PasswordResetRequired: true

  # Store User Emails in Parameter Store
  S3UserEmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user/s3/email"
      Type: "String"
      Value: !Ref S3UserEmail

  EC2UserEmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user/ec2/email"
      Type: "String"
      Value: !Ref EC2UserEmail

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "arn:aws:ssm:us-east-1:050752639856:parameter/user/s3/email"
                  - "arn:aws:ssm:us-east-1:050752639856:parameter/user/ec2/email"
                  - "arn:aws:logs:*:*:*"

  # Lambda Function for Logging User Creation
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os

          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              client = boto3.client('ssm')

              # Extract the user name from the event
              user_name = event['detail']['responseElements']['user']['userName']
              
              # Log the received event for troubleshooting
              logger.info(f"Event received: {json.dumps(event)}")
              
              # Determine the email parameter path based on the user
              if user_name == 's3-user':
                  email_parameter = '/user/s3/email'
              elif user_name == 'ec2-user':
                  email_parameter = '/user/ec2/email'
              else:
                  logger.warning(f"Unrecognized user: {user_name}")
                  return

              try:
                  # Retrieve the email parameter from SSM Parameter Store
                  email_response = client.get_parameter(Name=email_parameter)
                  # Retrieve the OTP password from the environment variable
                  otp_password = os.getenv('OTP_SECRET')

                  email = email_response['Parameter']['Value']

                  # Log the user creation details
                  logger.info(f"New user created: {user_name}")
                  logger.info(f"Email: {email}, OTP Password: {otp_password}")
              except Exception as e:
                  # Log any errors that occur
                  logger.error(f"Error occurred: {str(e)}")
                  raise e
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          OTP_SECRET: !Ref OTPSecret

  # EventBridge Rule to Trigger Lambda on User Creation
  EventBridgeRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - CreateUser
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "TargetFunctionV1"

  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeRule.Arn

Outputs:
  OTPSecretARN:
    Description: "ARN of the One-Time Password Secret"
    Value: !Ref OTPSecret
